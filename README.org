#+title: Ft_Printf

* Table of contents :TOC_3:
- [[#makefile][Makefile]]
  - [[#integrating-libft-into-libftprintf][Integrating libft into libftprintf]]
  - [[#bear][bear]]
- [[#testing][Testing]]
  - [[#capturing-output][Capturing output]]
  - [[#variadic-arguments][variadic arguments]]
- [[#va_][va_*]]
  - [[#va_start][va_start]]
  - [[#va_arg][va_arg]]
    - [[#allowed-types][allowed types]]
  - [[#va_end][va_end]]
- [[#format-string][Format string]]
- [[#precision-precision][precision [.precision]]]
- [[#minimum-field-width][minimum field width]]
  - [[#--dash][=-=: =dash=]]
  - [[#0-zero-flag][=0=: zero-flag]]
- [[#conversion-specifiers][conversion specifiers]]
  - [[#string-conversion-specifiers][string conversion specifiers]]
  - [[#character-conversion-specifiers][character conversion specifiers]]
  - [[#integer-conversions-specifiers][integer conversions specifiers]]
    - [[#d--i][d / i]]
    - [[#x--x][x / X]]
    - [[#u][u]]
  - [[#pointer-conversion-specifiers][pointer conversion specifiers]]
- [[#flags][flags]]

* Makefile
** Integrating libft into libftprintf
The archive =libftprintf.a= that we are building needs to incorporate =libft.a=.

#+begin_src makefile
NAME = libftprintf.a
LIBFT = path/to/libft
OBJ_FILES = file1.o file2.o # Add your object files here

# Build target
$(NAME): $(OBJ_FILES) $(LIBFT)/libft.a
	cp $(LIBFT)/libft.a $(NAME)
	ar rc $(NAME) $(OBJ_FILES)
#+end_src

Otherwise we can not use our archive without explicitly linking =libft.a=.

Imagine an end-user that wants to use our new ft_printf and therefore is linking libftprintf to their project.

#+begin_src c
/* new_project.c */
#include "libftprintf.h"

int main() {
	ft_printf("Hello world");
    return 0;
}
#+end_src

When they compile their project:

#+begin_src shell
cc new_project.c libftprintf.a
#+end_src

Suppose ft_printf uses ft_putstr_fd from libft. It might look like this:

#+begin_src c
#include "libft.h"

int ft_printf(const char* fmt_string, ...) {
	ft_putstr_fd(fmt_string, STDOUT_FILENO);
	return 0;
}
#+end_src

If we built =libftprintf.a= without incorporating =libft.a=, the compilation would fail because the linker would not be able to resolve ft_putstr_fd, as it would not be part of our archive.

An archive essentially is an aggregation of object files that a compiler can link to, and ft_putstr_fd would not be present without inclusion.
** bear
[[https://github.com/rizsotto/Bear][bear]] is a program that generates compile_commands.json file for you, so that clang-language server knows how compile the programs.

#+begin_src shell
bear -- <your-build-command>
#+end_src

By having a bear rule in your Makefile

#+begin_src makefile
bear: $(TEST_TARGET) $(OBJ_FILES)
#+end_src

you can generate the compile_commands.json as follows

#+begin_src shell
bear -- make bear
#+end_src
* Testing
We are dealing with two problems testing a function like ft_prinft.
** Capturing output
Since we need to verify that we're printing the right thing to stdout, we need to capture what is actually printed to stdout.

Gtest has a feature that allows us to do that. The syntax is as follows.
#+begin_src cpp
testing::internal::CaptureStdout();
ft_printf(fmt_string, args...);
std::string ftPrintfResult = testing::internal::GetCapturedStdout();
#+end_src

** variadic arguments
Variadic arguments, also known as variadic functions, are functions in C (and other languages) that can accept a variable number of arguments.

In C, variadic functions are defined using the ellipsis (...) syntax in the function parameter list.

Actually there is no big problem, it is just so that we are not able to do parametrized tests easily. But the layout that I found I think is compelling and easy enough.
#+begin_src c

template<typename... Args>
void compare_printf(const char* fmt_string, Args... args) {
	...
}

TEST(ft_printf_test, without_arguments) {
    compare_printf("Hello", "");
	...
}


TEST(ft_printf_test, string_conversions) {
    compare_printf("Hello %s", "World");
}
#+end_src
* va_*
The =va_arg=, =va_start=, and =va_end= macros are part of the C standard library and are used to handle functions with a variable number of arguments. They are defined in the =<stdarg.h>= header.

#+begin_src c
void va_start(va_list ap, last);
void va_end(va_list ap);
#+end_src

** va_start
#+begin_src c
void va_start(va_list ap, last);
#+end_src
- Initializes a =va_list= variable for subsequent use by =va_arg= and =va_end=.
- Should be called once before accessing the variable arguments.
- =ap= is the =va_list= variable, and =last= is the last fixed argument before the variable arguments.
** va_arg
#+begin_src c
type va_arg(va_list ap, type);
#+end_src
- Retrieves the next argument in the list.
- Should be called after =va_start= and before =va_end=.
- =ap= is the =va_list= variable, and =type= is the type of the next argument.
*** allowed types
**** a type so that by adding a * to the type it becomes a pointer to that type
Man page:
#+begin_example
The argument type is a type name specified so that the type of a pointer to an object that has the specified type can be obtained simply by adding a * to type.
#+end_example
- need to specify the type in a way that allows =va_arg= to correctly calculate the memory offset for the next argument
- this requirement needs special care when working with array and function types

***** arrays
Wrong:
#+begin_src c
int array[10] = va_arg(args, int[10]);
#+end_src
correct:
#+begin_src c
int *array = va_arg(args, int *);
#+end_src

***** functions
wrong:
#+begin_src c
void (func)() = va_arg(args, void());
#+end_src
correct (not tested yet):
#+begin_src c
void (*func)() = va_arg(args, void (*));
#+end_src

**** default argument promotion and fully promoted type
From the man page
#+begin_src c
/* need a cast here since va_arg only
   takes fully promoted types */
c = (char) va_arg(ap, int);
#+end_src

https://stackoverflow.com/a/1256122
https://stackoverflow.com/a/1255818

In C, function arguments undergo a process known as "default argument promotions" when passed to a variadic function like =printf=.

The default argument promotions ensure that arguments are compatible with the function's parameter types and include the following rules:
- Integral promotions:
  - Types smaller than =int= (like =char= and =short=) are promoted to =int= or =unsigned int= if =int= can represent all the values of the original type.
- Float arguments are promoted to =double= if the function parameter's type is =float=.

If the type specified in the function call does not match the actual promoted type of the argument, you may need to use appropriate casts to correctly interpret the value retrieved using =va_arg=.

#+begin_src c
/* need a cast here since va_arg only
   takes fully promoted types */
c = (char) va_arg(ap, int);
#+end_src

** va_end
#+begin_src c
void va_end(va_list ap);
#+end_src
- Cleans up the =va_list= variable when done.
- Should be called after accessing all the variable arguments.

* Format string
- Each conversion specification is introduced by the character =%=, and ends with a  ~conversion specifier~.
- In between there may be (in this order) zero or more flags, an =optional minimum field width=, an =optional precision= and an =optional length modifier=.

=%[$][flags][width][.precision][length modifier]conversion=

- arguments are used in the order given
- =*= and =conversion specifiers= ask for the next argument
- what is probably not asked for: Explicitly specifying which argument to use
  - =m= denotes position in arg-list, indexed with 1...
  - =%m$=  instead of =%=
  - =*m$= instead of =*=
  - example:
    #+begin_src c
printf("%2$*1$d", width, num);
printf("[%2$][*m1$][conversion]", width, num);
    #+end_src

* precision [.precision]
- =.= followed by optional decimal string
- or by '*'
  - means that the precision is given in the next argument
  - must by of type =int=
- if precision given as '.', it equals to 0
- negative precision is as if precision is omitted
* minimum field width
=%[$][flags][width][.precision][length modifier]conversion=
- minimum number of characters to be printed for a given value
- independent of format string -> only effects the conversion
- padding on left if converted value has fewer chararcters than field width
  - Value: |      text|
- if a conversion is wider than the field width, the field is expanded to contain the conversion (non-existant or too small therefore don't lead to truncation)
- value can be given with =*=
** =-=: =dash=
- negative field-width
- A negative field width is  taken as  a '-' flag  followed by  a positive  field width.
  - value is to be left adjusted on  the field boundary
  -
** =0=: zero-flag
- value shall be zero padded
- *for integer*: left with zeros rather than blanks
- =0= and =-= than =0= is ignored
- if precision is given than =0= flag is ignored
- behavior undefined for other conversions

* conversion specifiers
** string conversion specifiers
- printing with =ft_putstr_fd=
- getting the length with =ft_strlen=
** character conversion specifiers
- printing with =ft_putchar_fd=
- expect that always returns 1
** integer conversions specifiers
- default *precision* = 1
- zero with explicit precision 0, output is empty
- *precision*: minimum number of digits to appear
*** d / i
- printing with =ft_putnbr_fd=
- getting nbr of digits with =ft_num_of_digits= 
*** x / X
- using =ft_unsigned_to_hex=, which sets a string to the hexadecimal representation of the argument
- using =print_hex_str= to print this string
  - has an extra parameter to set if lower or upper_case
*** u
- printing with =ft_put_unsigned_int_fd=
- getting nbr of digits with =ft_num_of_digits_unsigned= 
** pointer conversion specifiers
- use =ft_putstr_fd= if the pointer is =NULL=
- using =ft_ptr_to_hex=, which sets a string to the hexadecimal representation of the argument (a pointer in this case)
- using =print_hex_str= to print this string
* flags

The character % is followed by zero or more of the following flags:
